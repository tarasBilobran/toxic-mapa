from typing import Dict, Any

from aiogram import F, Router, Bot
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

import keyboards
import text
from scene import LeaveReportScene
from utils import is_valid_number

router = Router()


@router.message(Command("start"))
async def start_handler(message: Message) -> None:
    await message.answer(text.greet.format(name=message.from_user.full_name), reply_markup=keyboards.menu)


@router.message(F.text == "–ú–µ–Ω—é")
@router.message(F.text == "–í–∏–π—Ç–∏ –≤ –º–µ–Ω—é")
@router.message(F.text == "‚óÄÔ∏è –í–∏–π—Ç–∏ –≤ –º–µ–Ω—é")
async def menu(message: Message) -> None:
    await message.answer(text.menu, reply_markup=keyboards.menu)


@router.callback_query(Text("generate_map"))
async def map_handler(callback: CallbackQuery) -> None:
    await callback.message.answer(text.maps_generation)
    await callback.message.answer("–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ –º–∞–ø–∞")


@router.callback_query(Text("register_report"))
async def leave_report_handler(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(LeaveReportScene.CONTACTS)
    await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")


@router.message(LeaveReportScene.CONTACTS, F.text)
async def process_contacts(message: Message, state: FSMContext) -> None:
    phone_number = message.text
    if not is_valid_number(phone_number):
        await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    await state.update_data(name=message.from_user.full_name, username=message.from_user.username, phone=message.text)
    await state.set_state(LeaveReportScene.LOCATION)
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –ª–æ–∫–∞—Ü—ñ—î—é", request_location=True),
            ]
        ], resize_keyboard=True, one_time_keyboard=True
    ))


@router.message(LeaveReportScene.LOCATION, F.location)
async def process_location(message: Message, state: FSMContext) -> None:
    await state.update_data(location=message.location)
    await state.set_state(LeaveReportScene.PHOTOS)
    await message.answer("–û—Ç—Ä–∏–º–∞–ª–∏ –ª–æ–∫–∞—Ü—ñ—é, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Ñ–æ—Ç–æ –¥–µ —Å–∞–º–µ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∞ –æ—Ç—Ä—É—Ç–∞")


# TODO Accept upload 5 photos
@router.message(LeaveReportScene.PHOTOS, F.photo)
async def process_photos(message: Message, state: FSMContext) -> None:
    await state.update_data(photo=message.photo)
    await state.set_state(LeaveReportScene.NEUTRALIZED)
    await message.answer(
        "–ß–∏ –ø—Ä–∏–±—Ä–∞–ª–∏ –≤–∏ –æ—Ç—Ä—É—Ç—É?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="–¢–∞–∫"),
                    KeyboardButton(text="–ù—ñ"),
                ]
            ],
            resize_keyboard=True,
        ),
    )


@router.message(LeaveReportScene.NEUTRALIZED, F.text.casefold())
async def process_neutralized(message: Message, state: FSMContext) -> None:
    await state.update_data(neutralized=message.text.casefold())
    data = await state.get_data()
    await state.clear()
    await message.answer(
        "–ß—É–¥–æ–≤–æ, –∑–±–µ—Ä—ñ–≥–∞—é –≤–∞—à —Ä–µ–ø–æ—Ä—Ç",
        reply_markup=ReplyKeyboardRemove(),
    )
    await show_summary(message=message, data=data)


async def show_summary(message: Message, data: Dict[str, Any]) -> None:
    print(data)
    name = data["name"]
    username = data["username"]
    phone = data["phone"]
    photo = data["photo"]
    location = data["location"]
    neutralized = data["neutralized"]
    text = f"–Ü–º—è - {name}\n" \
           f"–Æ–∑–µ—Ä–Ω–µ–π–º - {username}\n" \
           f"–¢–µ–ª–µ—Ñ–æ–Ω - {phone}\n" \
           f"–§–æ—Ç–æ - {photo}\n" \
           f"–õ–æ–∫–∞—Ü—ñ—è - {location}\n" \
           f"–ó–Ω–µ—à–∫–æ–¥–∂–µ–Ω–æ - {neutralized}\n"
    await message.answer(text=text)


@router.callback_query(Text("help_dog"))
async def an_incident_handler(callback: CallbackQuery) -> None:
    await callback.message.answer(text.an_incident)


@router.callback_query(Text("describe_symptoms"))
async def describe_poison_symptoms(callback: CallbackQuery) -> None:
    await callback.message.answer(text.poison_symptoms)


@router.callback_query(Text("contacts"))
async def contacts_handler(callback: CallbackQuery) -> None:
    await callback.message.answer("üè• –°–ø–∏—Å–æ–∫ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–∏—Ö –∫–ª—ñ–Ω—ñ–∫ —É –õ—å–≤–æ–≤—ñ:\n" + "\n".join(text.contacts))
